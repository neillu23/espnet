batch_size: 4
#accum_grad: 8
max_epoch: 80
patience: none
num_att_plot: 0
unused_parameters: true
# The initialization method for model parameters
init: xavier_uniform
best_model_criterion:
    -   - valid
        - acc
        - max
    -   - valid
        - loss
        - min
keep_nbest_models: 10

batch_type: folded
num_workers: 4
optim: adam
optim_conf:
    lr: 0.0001
val_scheduler_criterion:
    - valid
    - loss
scheduler: warmuplr
scheduler_conf:
    warmup_steps: 30000
enh_model_conf:
    loss_type: snr
    add_tf_loss: true
    mask_type: PSM^2
    ref_channel: 4
enh_encoder: conv
enh_encoder_conf:
    channel: 256
    kernel_size: 20
    stride: 10
    in_channel: 5
enh_decoder: conv
enh_decoder_conf:
    channel: 256
    kernel_size: 20
    stride: 10
enh_separator: tcn
enh_separator_conf:
    num_spk: 1
    layer: 8
    stack: 4
    bottleneck_dim: 256
    hidden_dim: 512
    kernel: 3
    causal: false
    norm_type: "gLN"
    nonlinear: relu
    use_noise_mask: true

specaug: specaug
specaug_conf:
    apply_time_warp: true
    time_warp_window: 5
    time_warp_mode: bicubic
    apply_freq_mask: true
    freq_mask_width_range:
    - 0
    - 30
    num_freq_mask: 2
    apply_time_mask: true
    time_mask_width_range:
    - 0
    - 40
    num_time_mask: 2

# ASR Related
frontend: default
frontend_conf:
    fs: 16000
    n_fft: 256
    win_length: 256
    hop_length: 64
    apply_stft: true

encoder: transformer
encoder_conf:
    output_size: 256
    attention_heads: 4
    linear_units: 2048
    num_blocks: 12
    dropout_rate: 0.1
    positional_dropout_rate: 0.2
    attention_dropout_rate: 0.0
    input_layer: conv2d
    normalize_before: true

decoder: transformer
decoder_conf:
    attention_heads: 4
    linear_units: 2048
    num_blocks: 6
    dropout_rate: 0.1
    positional_dropout_rate: 0.1
    self_attention_dropout_rate: 0.0
    src_attention_dropout_rate: 0.0

ctc_conf:
    reduce: true

asr_model_conf:
    ctc_weight: 0.3
    lsm_weight: 0.1
    length_normalized_loss: false

joint_model_conf:
    enh_weight: 1.0
    end2end_train: true
    cal_enh_loss: true # whether to calculate enh_loss, need the reduce in ctc_conf
    # truncated back-propagation through time
    tBPTT: true
    truncate_length: 40000
    truncate_win_len: 20
    truncate_win_shift: 10
    use_real_data: true
